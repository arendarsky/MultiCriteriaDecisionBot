import pandas as pd
import numpy as np
from sklearn.preprocessing import StandardScaler
import pickle


def get_standard_scaler():
    df = pd.read_csv('dataset4.csv')
    dff = TransformData(df)
    X = dff.drop(columns=['TARGET'])
    standard_scaler = StandardScaler()
    standard_scaler.fit(X)
    return standard_scaler


def get_model():
    filename = 'finalized_model.sav'
    return pickle.load(open(filename, 'rb'))


def TransformData(df):
    dff = pd.DataFrame(df.iloc[:,[1, 2,3, 4, 5, 6, 7, 8 ,10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26,28 ,29 ,30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42 ,43 ,44,45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 67, 68, 73, 77, 96, 97]])
    cleanup_nums = {"metric_1": {"Присутствует": 1, "Отсутствует": 0},
                "metric_2": {"Присутствует": 1, "Отсутствует": 0},
                "metric_3": {"Присутствует": 1, "Отсутствует": 0},
                "metric_4": {"Да": 1, "Нет": 0},
                "metric_5": {"Подтверждена": 1, "Не подтверждена": 0},
                "metric_6": {"Присутствуют": 1, "Отсутствуют": 0},
                "metric_7": {"Новый": 1, "Повторный": 0},
                "metric_8": {"Присутствует": 1, "Отсутствует": 0},
                "metric_10": {"Имеется": 1, "Не имеется": 0},
                "metric_11": {"Предоставлена": 1, "Скрыта": 0},
                "metric_12": {"Предоставлена развернутая информация": 1, "Не предоставлен мин. пакет": 0},
                "metric_14": {"Положительное": 1, "Условно-положительное": 0},
                "metric_15": {"Положительное": 2, "Условно-положительное": 1, "Отрицательное": 0},
                "metric_16": {"Москва": 2, "Санкт-Петербург": 1},
                "metric_17": {"Выше среднего": 3, "Средняя": 2, "Ниже среднего": 1, "Низкая": 0},
                "metric_19": {15: 1, 10: 0},
                "metric_20": {"Удовлетворяет условиям программы": 1, "Отказ": 0},
                "metric_21": {"Удовлетворяет условиям программы": 1, "Отказ": 0},
                "metric_22": {"Удовлетворяет условиям программы": 1, "Отказ": 0},
                "metric_23": {"Удовлетворяет условиям программы": 1, "Отказ": 0},
                "metric_24": {"Удовлетворяет условиям программы": 1, "Отказ": 0},
                "metric_25": {"Удовлетворяет условиям программы": 1, "Отказ": 0},
                "metric_46": {"Да": 1, "Нет": 0},
                "metric_49": {"Обороты увеличиваются": 3, "Обороты остались на таком же уровне": 2, "Обороты сократились": 1, "Обороты отсутствуют": 0},
                "metric_50": {"Присутствуют": 1, "Отсутствуют": 0},
                "metric_51": {"Присутствуют": 1, "Отсутствуют": 0},
                "metric_52": {"Присутствуют": 1, "Отсутствуют": 0},
                "metric_54": {"Присутствует": 1, "Отсутствует": 0},
                "metric_55": {"Фактический": 1, "Номинальный": 0},
                "metric_56": {"Присутствует": 1, "Отсутствует": 0},
               }
    dff.replace(cleanup_nums, inplace=True)
    dff["metric_13"] = np.where(dff["metric_13"].str.contains("Основная система налогообложения"), 1, 0)
    dff = pd.get_dummies(dff, columns=["metric_18"], prefix=["metric_18"])
    dff = pd.get_dummies(dff, columns=["metric_16"], prefix=["metric_16"])
    return dff


def transform_data(df):
    dff = pd.DataFrame(df)
    cleanup_nums = {"metric_1": {"Присутствует": 1, "Отсутствует": 0},
                    "metric_2": {"Присутствует": 1, "Отсутствует": 0},
                    "metric_3": {"Присутствует": 1, "Отсутствует": 0},
                    "metric_4": {"Да": 1, "Нет": 0},
                    "metric_5": {"Подтверждена": 1, "Не подтверждена": 0},
                    "metric_6": {"Присутствуют": 1, "Отсутствуют": 0},
                    "metric_7": {"Новый": 1, "Повторный": 0},
                    "metric_8": {"Присутствует": 1, "Отсутствует": 0},
                    "metric_10": {"Имеется": 1, "Не имеется": 0},
                    "metric_11": {"Предоставлена": 1, "Скрыта": 0},
                    "metric_12": {"Предоставлена развернутая информация": 1, "Не предоставлен мин. пакет": 0},
                    "metric_14": {"Положительное": 1, "Условно-положительное": 0},
                    "metric_15": {"Положительное": 2, "Условно-положительное": 1, "Отрицательное": 0},
                    "metric_16": {"Москва": 2, "Санкт-Петербург": 1},
                    "metric_17": {"Выше среднего": 3, "Средняя": 2, "Ниже среднего": 1, "Низкая": 0},
                    "metric_19": {15: 1, 10: 0},
                    "metric_20": {"Удовлетворяет условиям программы": 1, "Отказ": 0},
                    "metric_21": {"Удовлетворяет условиям программы": 1, "Отказ": 0},
                    "metric_22": {"Удовлетворяет условиям программы": 1, "Отказ": 0},
                    "metric_23": {"Удовлетворяет условиям программы": 1, "Отказ": 0},
                    "metric_24": {"Удовлетворяет условиям программы": 1, "Отказ": 0},
                    "metric_25": {"Удовлетворяет условиям программы": 1, "Отказ": 0},
                    "metric_46": {"Да": 1, "Нет": 0},
                    "metric_49": {"Обороты увеличиваются": 3, "Обороты остались на таком же уровне": 2,
                                  "Обороты сократились": 1, "Обороты отсутствуют": 0},
                    "metric_50": {"Присутствуют": 1, "Отсутствуют": 0},
                    "metric_51": {"Присутствуют": 1, "Отсутствуют": 0},
                    "metric_52": {"Присутствуют": 1, "Отсутствуют": 0},
                    "metric_54": {"Присутствует": 1, "Отсутствует": 0},
                    "metric_55": {"Фактический": 1, "Номинальный": 0},
                    "metric_56": {"Присутствует": 1, "Отсутствует": 0},
                    }
    dff.replace(cleanup_nums, inplace=True)
    dff["metric_13"] = np.where(dff["metric_13"].str.contains("Основная система налогообложения"), 1, 0)
    return dff


def calculate_probabilities(file_path):
    sd = get_standard_scaler()
    model = get_model()
    df = pd.read_csv(file_path)
    dff = transform_data(df)

    names = dff[['names']]
    X = pd.DataFrame(dff.drop(columns=['names']))
    X = sd.transform(X)
    prob = model.predict_proba(X)[:, 1]
    final_db = pd.DataFrame(names, columns=['names'])
    final_db['probabilities'] = prob
    return final_db


